Use asyncblock (https://github.com/scriby/asyncblock) to
	* clean up the messy code that collects the data from Nike's servers
	* limit the number of parallel requests triggered when data is loaded, e.g., 10 per user

Make more db-centric rather than (Nike-)request-centric

Figure out how to only query runs that are more recent than the last one in the database

Add option to peridocially auto-update so that data is already there when user checks in

More direct error handling that re-requests data when Nike responds with an HTML error page

Upgrade bootstrap (http://twitter.github.com/bootstrap/) to 2.x and ...
	* clean up HTML and CSS in the process
	* make use of their nifty buttons, dropdown menus, and progress bars
	* use heart icon instead of unicode, download icon in button, etc.

Finally add in direct RunKeeper transfer

Find a way to render a map of runs into an image offline, e.g., once every few hours or once per day

Refactor, refactor, refactor.

Testing:
* Mocha, http://visionmedia.github.com/mocha/
* Chai, http://chaijs.com/
* Maybe SiNon, https://github.com/cjohansen/sinon.js
